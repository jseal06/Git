#BlueJ class context
comment0.params=
comment0.target=StringAnalyser()
comment0.text=\n\ Constructs\ a\ new\ StringAnalyser\ without\ any\ Strings.\n
comment1.params=strings
comment1.target=StringAnalyser(java.lang.String[])
comment1.text=\n\ Constructs\ a\ new\ StringAnalyser\ containing\ the\ non-null\ Strings\ in\n\ strings.\ The\ strings\ array\ may\ be\ modified\ by\ the\ caller\ afterwards\n\ without\ affecting\ this\ StringAnalyser,\ and\ it\ will\ not\ be\ modified\ by\n\ this\ constructor.\n\n\ @param\ strings\ \ must\ not\ be\ null;\ non-null\ elements\ are\ added\ to\ the\n\ \ constructed\ StringAnalyser\n
comment10.params=
comment10.target=int\ numberOfStringsWithUpperCaseChars()
comment10.text=\n\ Returns\ how\ many\ of\ the\ Strings\ in\ this\ StringAnalyser\ contain\n\ at\ least\ one\ upper-case\ character.\n\n\ For\ example,\ if\ this\ StringAnalyser\ contains\ "a",\ "bC",\ and\n\ "DEfGH",\ the\ result\ is\ 2\ ("a"\ is\ not\ counted\ because\ it\ does\n\ not\ contain\ an\ upper-case\ character,\ but\ the\ other\ two\ Strings\n\ contain\ at\ least\ one\ upper-case\ character\ each,\ so\ they\ are\ both\n\ counted).\n\n\ @return\ the\ number\ of\ Strings\ in\ this\ StringAnalyser\ that\n\ \ contain\ at\ least\ one\ upper-case\ character,\ as\ determined\ by\n\ \ the\ class\ method\ boolean\ isUpperCase(char\ c)\ of\ the\ class\ Character\n
comment11.params=
comment11.target=java.lang.String\ getGreatest()
comment11.text=\n\ Returns\ the\ greatest\ String\ in\ this\ StringAnalyser\ with\ respect\n\ to\ the\ "natural\ ordering"\ of\ String,\ which\ is\ induced\ by\ the\n\ instance\ method\ boolean\ compareTo(String\ s)\ of\ the\ class\ String.\n\n\ @return\ the\ greatest\ String\ in\ this\ StringAnalyser,\ where\ "greatest"\n\ \ is\ defined\ with\ respect\ to\ String.compareTo(String\ s);\ null\ if\ this\n\ \ StringAnalyser\ contains\ no\ String\ objects.\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=\n\ Returns\ a\ String\ representation\ for\ the\ contents\ of\ this\n\ StringAnalyser.\n\n\ The\ String\ representation\ starts\ with\ a\ "["\ and\ ends\ with\ a\ "]".\n\ The\ Strings\ are\ separated\ by\ ",\ ".\ The\ order\ of\ the\ Strings\ from\n\ this\ StringAnalysis\ in\ its\ String\ representation\ is\n\ implementation-specific\ (i.e.,\ it\ does\ not\ matter,\ and\ callers\n\ should\ not\ rely\ on\ any\ particular\ order).\n\n\ For\ example,\ if\ this\ StringAnalyser\ contains\ the\ Strings\n\ "Alice",\ "Bob",\ and\ "Alice",\ the\ three\ possible\ valid\n\ results\ are\ "[Alice,\ Bob,\ Alice]"\ or\ "[Alice,\ Alice,\ Bob]"\n\ or\ "[Bob,\ Alice,\ Alice]".\n\n\ @return\ a\ String\ representation\ of\ the\ Strings\ that\ have\ been\ added\n\ \ to\ this\ in\ the\ constructor\ or\ via\ the\ add/addAll\ methods\n\ \ since\ object\ construction\ or\ since\ the\ last\ reset()\ (if\ any)\ \n
comment2.params=s
comment2.target=boolean\ add(java.lang.String)
comment2.text=\n\ Adds\ a\ String\ s\ to\ this\ StringAnalyser\ if\ s\ is\ not\ null;\n\ does\ not\ modify\ this\ StringAnalyser\ otherwise.\n\n\ @param\ s\ \ to\ be\ added\ to\ this\ StringAnalyser\n\ @return\ true\ if\ s\ is\ not\ null,\ false\ otherwise\n
comment3.params=strings
comment3.target=boolean\ addAll(java.lang.String[])
comment3.text=\n\ Adds\ all\ non-null\ Strings\ in\ strings\ to\ this\ StringAnalyser.\n\n\ @param\ strings\ \ contains\ the\ String\ objects\ to\ be\ added\ to\n\ \ this\ StringAnalyser;\ must\ not\ be\ null\ (but\ may\ contain\ null)\n\ @return\ true\ if\ at\ least\ one\ element\ of\ strings\ is\ non-null;\n\ \ false\ otherwise\n
comment4.params=
comment4.target=void\ reset()
comment4.text=\n\ Resets\ this\ StringAnalyser\ to\ a\ StringAnalyser\ that\ contains\ 0\ Strings.\n
comment5.params=
comment5.target=int\ numberOfStrings()
comment5.text=\n\ Returns\ how\ many\ non-null\ Strings\ this\ StringAnalyser\ contains.\n\n\ @return\ how\ many\ non-null\ Strings\ this\ StringAnalyser\ contains\n
comment6.params=
comment6.target=int\ numberOfUniqueStrings()
comment6.text=\n\ Returns\ how\ many\ distinct\ non-null\ Strings\ this\ StringAnalyser\n\ contains.\ We\ say\ that\ two\ non-null\ Strings\ x\ and\ y\ are\n\ <i>distinct</i>\ if\ x.equals(y)\ evaluates\ to\ false.\n\n\ @return\ how\ many\ distinct\ non-null\ Strings\ this\ StringAnalyser\ contains\n
comment7.params=
comment7.target=int\ totalLength()
comment7.text=\n\ Returns\ the\ sum\ of\ the\ lengths\ of\ all\ (non-null)\ Strings\ in\ this\ StringAnalyser.\n\n\ @return\ the\ sum\ of\ the\ lengths\ of\ all\ (non-null)\ Strings\ in\ this\ StringAnalyser\n
comment8.params=analysers
comment8.target=int\ totalLength(StringAnalyser[])
comment8.text=\n\ Class\ method\ to\ return\ the\ sum\ of\ all\ String\ lengths\ in\ all\ elements\n\ of\ analysers.\ For\ example,\ if\ analysers\ contains\ two\ StringAnalysers,\n\ one\ with\ the\ contents\ "Alice"\ and\ "Bob"\ and\ one\ with\ the\ contents\n\ "George",\ the\ result\ will\ be\ (5\ +\ 3)\ +\ 6\ \=\ 14.\n\n\ Entries\ of\ the\ array\ analysers\ may\ be\ null,\ and\ these\ entries\ should\ be\n\ ignored\ in\ the\ computation.\ So\ if\ in\ the\ above\ example\ we\ had\ an\n\ additional\ third\ array\ entry\ null,\ the\ result\ would\ be\ exactly\n\ the\ same.\n\n\ @param\ analysers\ \ must\ not\ be\ null,\ but\ may\ contain\ null\n\ @return\ the\ sum\ of\ all\ (non-null)\ String\ lengths\ in\ all\ elements\ of\ analysers\n
comment9.params=
comment9.target=double\ averageLength()
comment9.text=\n\ Returns\ the\ average\ length\ of\ the\ (non-null)\ Strings\ in\ this\ StringAnalyser.\n\ In\ case\ there\ is\ no\ String\ in\ this\ StringAnalyser,\ -1.0\ is\ returned.\n\n\ For\ example,\ if\ this\ StringAnalyser\ has\ the\ contents\ "A"\ and\ "Bc",\n\ the\ result\ is\ 1.5.\n\n\ @return\ the\ average\ length\ of\ the\ Strings\ in\ this\ StringAnalyser,\n\ \ or\ -1.0\ if\ there\ is\ no\ such\ String.\n
numComments=13
